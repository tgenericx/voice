// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  STAFF
  ADMIN
}

model User {
  id         String    @id @default(cuid())
  role       Role      @default(STUDENT)
  avatar     String?
  email      String    @unique @db.VarChar(255)
  matricNo   String    @unique @db.VarChar(20)
  firstName  String
  lastName   String
  department String
  password   String
  deletedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  complaints    Complaint[]
  refreshTokens RefreshToken[]
  messages      Message[]
  attachments   Attachment[]
  notifications Notification[]
  timeline      TimelineEvent[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Complaint {
  id          String            @id @default(cuid())
  title       String
  description String
  status      ComplaintStatus   @default(SUBMITTED)
  category    ComplaintCategory
  priority    ComplaintPriority
  madeById    String
  madeBy      User              @relation(fields: [madeById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  attachments Attachment[]
  messages    Message[]
  timeline    TimelineEvent[]

  @@index([status])
  @@index([priority])
  @@index([madeById])
}

model TimelineEvent {
  id          String    @id @default(cuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  actorId     String
  actor       User      @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  action      String
  details     Json?
  createdAt   DateTime  @default(now())
}

enum ComplaintStatus {
  SUBMITTED
  UNDER_REVIEW
  RESPONDED
  RESOLVED
}

enum ComplaintCategory {
  TECHNICAL_ISSUE
  ACADEMIC_POLICY
  FACULTY_BEHAVIOR
  GRADING_DISPUTE
  FACILITY_ISSUE
  OTHER
}

enum ComplaintPriority {
  LOW
  MEDIUM
  HIGH
}

model Attachment {
  id           String     @id @default(cuid())
  fileName     String
  fileUrl      String
  fileSize     Int
  uploadedAt   DateTime   @default(now())
  uploadedById String
  uploadedBy   User       @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  complaintId  String?
  Complaint    Complaint? @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  @@index([uploadedById])
}

model Message {
  id          String     @id @default(cuid())
  content     String
  senderId    String
  sender      User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  complaintId String?
  Complaint   Complaint? @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())

  @@index([complaintId])
  @@index([senderId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}
